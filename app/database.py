"""
db.py
-----
Configuraci√≥n de la base de datos para la aplicaci√≥n.

Este m√≥dulo se encarga de:
- Cargar la URL de la base de datos desde variables de entorno.
- Configurar el motor de conexi√≥n con SQLAlchemy.
- Crear la sesi√≥n para interactuar con la base de datos.
- Definir la clase base para los modelos (ORM).
- Proveer funciones utilitarias para obtener y cerrar conexiones.
"""

import os
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import NullPool
from dotenv import load_dotenv

# üîπ Cargar variables de entorno desde el archivo .env
load_dotenv()

# üîπ URL de conexi√≥n a la base de datos
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    # Si no est√° configurada, se lanza un error
    raise ValueError("DATABASE_URL no est√° configurada")

# üîπ Ajuste de driver:
# Cambiar `postgresql://` a `postgresql+psycopg://` para usar psycopg3 en lugar de psycopg2
if DATABASE_URL.startswith("postgresql://"):
    DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+psycopg://", 1)

# üîπ Crear motor de conexi√≥n
# echo=True ‚Üí muestra las consultas en consola (√∫til en desarrollo).
engine = create_engine(
    DATABASE_URL,
    echo=True,           # Logs de SQL en consola (desact√≠valo en producci√≥n con False)
    pool_size=5,         # N√∫mero de conexiones en el pool
    max_overflow=10,     # Conexiones extra si el pool est√° lleno
    pool_pre_ping=True,  # Verifica la conexi√≥n antes de usarla
    pool_recycle=3600,   # Recicla conexiones cada hora
)

# üîπ Crear sesi√≥n para interactuar con la BD
SessionLocal = sessionmaker(
    autocommit=False,  # No confirmar cambios autom√°ticamente
    autoflush=False,   # No enviar datos autom√°ticamente antes de ejecutar queries
    bind=engine        # Vincular al motor creado
)

# üîπ Base declarativa
# Esta clase es usada por los modelos para mapear tablas en la base de datos.
Base = declarative_base()

def get_db():
    """
    Generador de sesiones de base de datos.
    
    Se usa en dependencias de FastAPI para obtener una sesi√≥n
    y cerrarla autom√°ticamente al final.
    
    Yields:
        Session: Sesi√≥n activa de SQLAlchemy.
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def close_db_connections():
    """
    Cierra todas las conexiones activas en el motor.
    
    √ötil cuando la aplicaci√≥n se detiene o se reinicia,
    especialmente en entornos de despliegue (ej. Vercel, Docker).
    """
    engine.dispose()
